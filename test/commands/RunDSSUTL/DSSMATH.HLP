**     **05**-------------------------------
 WCCMAI        1978
 FUNCTION      6772
 **           11010
 CATALOG      11279
 DPATH        12017
 CLEAR        12802
 COMPUTE      13454
 DIAG         14933
 DTSHIFT      15358
 FINISH       16018
 GET          16096
 HELP         17514
 PUT          18019
 SE           19766
 SD           20364
 SMISSING     21492
 SHOW         22177
 SP           23129
 STATUS       23944
 TABULATE     24782
 TABFILE      25750
 CMISSING     26084
 DECIMAL      26572
 TIME         27262
 $CO          28202
 $AB          28572
 ACC          28930
 CMA          29620
 DDT          32329
 DECPAR       33161
 DIFF         34016
 DIFF1        34571
 EDPD         36137
 ESTLIN       37000
 ESTPPT       37726
 FMA          38825
 GENTSR       39609
 GENTSIR      40597
 MATE         42997
 MAX          43700
 MEAN         44006
 MIN          44320
 LAST         44637
 MRG          44949
 MRGP         45706
 COMBP        46401
 OLY          48401
 OPEN         50624
 PERCON       51207
 POLY         51716
 POLY2        52264
 QAC          52840
 RND          53539
 RTABLE       54529
 RTABLR       55865
 RTABL2       56760
 SCRN1        57700
 SCRN2        58284
 SHIFT        59396
 TS1          60163
 TS2          60976
 TS3          62021
 TS4          62913
 TSHIFT       63287
 TSNAP        63744
 TTSR         64432
 TTSI         67134
 TSCYCL       67576
 SQRT         70737
 LOG10        71393
 LOG          72046
 ABS          72717
 INT          73218
 NINT         73757
 SIN          74306
 COS          74875
 TAN          75449
 1/X          76023
 MUSK         76660
 PULS         77248
 SS           78542
 SSW          79287
 COUNT        80233
 CORR         80659
 SDEV         81894
 SKEW         82333
 SELECT       82903
 MREG         87132
 AMREG        89362
 CONIC        91385
 END          93061
-----
#TAG WCCMAI
      DSSMATH is a utility  for processing operational hydrologic time-series
  data  on  a  near  real-time  basis.    The  program provides  a  core  of
  essential, elemental capabilities  for:  transformations, such as  stage to
  flow;  screening; and  estimation  of missing  or  erroneous values.

      The processing oftime-series data with DSSMATH, either interactively or
  through a  batch  input file,  is  directed with  commands.   Commands  are
  specified  with two-character mnemonics in columns 1-2 of the input stream.
  The generalized form of the commands is:

    XX[.options] [parameter 1] [parameter 2] ....

      Commands typically require  parameters.    Parameters  supply  specific
  information about the objects or entities to be processed or specifications
  to control the process.

      Options are single  characters used  to  specify  alternative  ways  of
  processing.
#BREAK
      A list of commands is presented below.  To get a  detailed description,
  Enter:  HE [Command].   To get a listing of the available DSSMATH functions,
  Enter:   HE FUNCTION.
                     Commands
     Command                Description
       CA  Display a catalog of a DSS file.
       CL  Clear all or specific data variables from memory.
       CO  Compute an arithmetic or function sequence.
       CM  Set missing character string to use in tabular output.
       DE  Set decimal places to use in tabular output.
       DP  Display a selective catalog of a DSS file.
       FI  Terminate and exit the program.
       GE  Get or retrieve data from a DSS file.
       HE  Help command used to list DSSMATH specific commands.
       OP  Open a new DSS file.
       PU  Put or store data in a DSS file.
       SD  Set DSSMATH data variable descriptions.
       SE  Set starting date and time used to write the next "PUT" command.
       SM  Set missing value indicators.
       SP  Set DSSMATH data variable pathname.
       ST  Display status of DSSMATH data variables.
       TA  Tabulate a list of variables.
       TI  Set a time-window for time series data.
       **  Comment line.
#BREAK
       $CO    Resume processing subsequent to an error
              condition being encountered during a macro
              or batch execution.
       $AB    Abort (stop) processing subsequent to an
              error condition being encountered during a
              macro or batch execution.
       SHOW   Displays selected internal information about
              the data variable denoted by specified
              variable label.
       DIAG   Toggles DSS diagnostic trace output on and off.
       TABF   Set the output tabulate file name.
#BREAK
 Advanced Command Capabilities:

 DSSMATH supports a Doskey like command capability and allows the user to
 bring back up to 20 previous commands entered.  The following functions
 are available.

      UP ARROW    Displays the previous command in the list.
      DOWN ARROW  Displays the next command in the list.
      PAGE UP     Displays the oldest command in the list.
      PAGE DOWN   Displays the newest command in the list.
      F7          Displays the list of commands stored.
      Alt F7      Clear all stored commands stored.
      F8          Cycles through the stroed commands that start with the
                  characters you specify.
      F9          Activate recording of all commands into DSSMATH.LOG file.
      Shift F9    Load commands recorded in DSSMATH.LOG file.
      Alt F9      Stop recording of commands into DSSMATH.LOG file.
      Ctrl F9     Stop recording of commands and delete DSSMATH.LOG file.
      F10         Load the commands previously used in a previous session
                  and save commands in a file at the end of this session.
                  Entering a -Q option in the excution line will perform
                  the F10 function at excution time.  Example: DSSMATH -Q
      Alt  F10    Toggle to save or not save commands to a quick start file.
      Ctrl F10    Load PREAD macros into command buffer and write present
                  command to quick start file.  The macros will be loaded
                  20 at a time with each Ctrl F10 entered.
      Shift F10   Load DPATH path names into command buffer and write present
                  command to quick start file.  The pathnames will be loaded
                  20 at a time with each Shift F10 entered. Note: You must
                  use the selective catalog command DP first and then use
                  the Shift F10.
      ESC         Clears the command from the screen.

 It supports all the editing keys that are normally available such as the
 BACKSPACE, DEL, ....
#TAG FUNCTION
  3..2.2.2   Functions
    Computations also  involve  special  functions  which  typically operate
  upon  one or more time-series records and  result in a scalar or new time--
  series record.   The functions are  summarized  below.  To  get  a detailed
  description of the function, Enter:   HE [Function Name].

          COMPUTE  FUNCTIONS
   Name                Description
    ABS       Absolute value.
    ACC       Running accumulation.
    AMREG     Apply muliple linear regression equation.
    CMA       Centered moving average smoothing.
    COMBP     Combine two paired data curves
    CONIC     Conic interpolation function.
    COS       Cosine trigonometric function.
    COUNT     Count valid and missing values.
    CORR      Compute correlation coefficients.
    DDT       Differences per unit time.
    DECPAR    Decaying basin wetness parameter.
    DIFF      Successive differences.
    DIFF1     Successive differences per time period.
    DTSHIFT   Determine the difference between to dates in minutes
                     - continued -
#BREAK
    EDPD      Edit paired data values
    ESTLIN    Estimate values for missing data.
    ESTPPT    Estimate values for missing precipitation.
    FMA       Forward moving average.
    GENTSR    Generate a regular interval time series.
    GENTSIR   Generate an irregular interval time series.
    INT       Truncate to whole numbers.
    LAST      Last valid value in a time series variable.
    LOG       Take the natural log base e of scalars, time series,
              or paired data.
    LOG10     Take the  log base 10 of scalars, time series,
              or paired data.
    MATE      Generate data pairs from two time series variables.
    MAX       Maximum value in a time series.
    MEAN      Mean value in a time series.
    MIN       Minimum value in a time series.
    MRG       Merge two time series.
    MRGP      Merge two paired data series.
    MREG      Multiple linear regression parameter determination.
    MUSK      Muskingum routing function.
    NINT      Round to nearest whole number.
                 - continued -
#BREAK
    OLY       Olympic smoothing
    PERCON    Period constants.
    POLY      Polynomial transformation.
    POLY2     Polynomial transformation with integral.
    PULS      Modified Puls routing function.
    QAC       Flow accumulator gage processor.
    RND       Round off.
    RTABLE    Rating table interpolation.
    RTABLR    Reverse rating table interpolation.
    RTABL2    Two variable rating table interpolation.
    SCRN1     Screen for erroneous data values based on a max and min range.
    SCRN2     Screen for erroneous data values based on a forward moving
              average maximum value.
    SDEV      Compute standard deviation of one independent variable.
    SELECT    Extract data based on a unique time specification.
    SHIFT     Shift adjustment.
    SIN       Sine trigonometric function.
    SKEW      Compute skew coefficient of one independent variable.
    SS        Straddle Stagger routing function.
                 - continued -
#BREAK
    SSW       Willmington District Straddle Stagger routing function.
    SQRT      Square root function.
    TAN       Tangent trigonometric function.
    TS1       Interpolate data at regular time intervals.
    TS2       Period averages at regular intervals.
    TS3       Period minimums and maximums at regular intervals.
    TS4       Interpolated data at irregular intervals.
    TSCYCL    Time series Cyclic analysis.
    TSHIFT    Shift time series in time.
    TSNAP     Snap Irregualar times to nearest Regular time period.
    TTSR      Transform Time Series to Regular.
    TTSI      Transform Time Series to Irregular.
    1/X       Inverse function.
#BREAK
  3..2.2.1   Arithmetic Computations

    An arithmetic computation consists of  addition (+), subtraction (-),
  multplication (*), division (/) or exponentiation (**) of a time-series,
  defined scalar or time-series .  The following are examples:

    COM Y=X+2     add 2 to time series "X"
    COM Y=X/A     "A" may be a scalar or time-series
    COM Y=X**.333
#TAG **
  Name:   **          Comment
  Use:    **,[parameters] ...

  Description:   May be used to annotate input command streams.
  Parameters:
          text -     Any text up to 130 characters per line.
  Example:
          **    Set the time window
#TAG CATALOG
  Name:   CATALOG     Display a catalog of a DSS file
  Use:    CA[.options],[parameters]

  Description:   Catalog (list) the  records (pathnames) in a DSS file.   The
                 catalog is listed at the terminal one screen-full at a time.
                 The numbers associated with each record may be used in other
                 commands to refer to the record in lieu of a pathname.
  Options:
          None   (list old catalog in full mode)
          N      (create new catalog)
          A      (create abbreviated catalog)
  Parameters:
          None        Catalog last opened or referenced DSS filename.
          filename    Is the name of a DSS file.
  Example:
          CA.NA  MASDSS:
#TAG DPATH
  Name:   DPATH     Display a selective catalog of a DSS file
  Use:    DP[.options],[parameters]

  Description:  Displays pathnames, tags and reference numbers from the catalog
                file (see CATALOG command).  The DP command has the selective
                display capability which provides the option of selecting and
                listing only certain pathnames based on matching pathname part.

  Options:
          None   Uses last referenced DSS file catalog.
          N      (create new catalog)
          A      (create abbreviated catalog)

  Parameters:

          None            Displays all pathnames.
          A=..B=..etc     Selective catalog based on pathname parts.
  Example:
          DP  MASDSS: B=RED CREEK C=FLOW
#TAG CLEAR
  Name:   CLEAR     Remove a variable data label from memory
  Use:    CL,[parameters]

  Description:   Clear  releases memory  slots.   If  the parameter  'ALL' is
                 present,  all  slots  are  released.    If  any  labels  are
                 specified,  then only  the memory  slots represented  by the
                 labels are released.
  Parameters:
          None        No action is taken.
          ALL         All  variable   labels  are  cleared   and  all  data  is
                      reinitialized.
          label...    Will clear specified variable labels.
  Example:
          CLEAR ALL
#TAG COMPUTE
  Name:   COMPUTE     Perform a computation
  Use:    CO,[parameters]

  Description:   DSS   data   header   information   are   checked  in   some
                 computations.   If any   of the  independent variable values
                 are flagged as  missing then the computed  value is missing.
                 Data types,  units of  the dependent  variable are generally
                 undefined but may be set by some functions.
#BREAK
  Parameters:   [IF(x1 operator x2)] result=expression

          "result"  is  a label  for the  resultant  of the  computation. The
                    result  may be a  currently defined  variable and  may be
                    used   as   an   independent   variable   in   subsequent
                    computations.

          "operator"  is one of the following relationships:
                    LT  less than        LE  less than or equal
                    EQ  equal            NE  not equal
                    GT  greater than     GE  greater than or equal

          "x1" and "x2"   are time series, scalars or constants.  Time series
                          should be concurrent with the operands.

          "expression"    is  either  a  simple  arithmetic  operation  or  a
                          function.  It may reference one or  more labels for
                          variables  which have  been previously  computed or
                          retrieved.
#TAG DIAG
  Name:   DIAG      Diagnostic DSS trace
  Use:    DI,[parameters]

  Description:   Togles diagnostic trace  output on  and off.  Caution,  this
                 command can generate extensive output.
  Parameters:
              None        Diagnostic trace is off.
              ON          Turn on diagnostic trace.
              OFF         Turn off diagnostic trace.
  Example:
          DI  ON
#TAG DTSHIFT
  Name:  DTSHIFT    Determine number of minutes between two dates
  USE:   DT,parameters

  Description:   This function can be used to determine the number of minutes
                 two dates and times.  It generates a scalar value that can be
                 used with the TSHIFT function to shift a time series in time.
  Parameters: time1       24 hour military time for first date
              date1       first date in the form DDMMMYYYY
              time2       24 hour military time for second date
              date2       second date in the form DDMMMYYYY

  Example:  COMP shift=dtshift(0100,01jan1932,2400,31dec1942)
#TAG FINISH
  Name:   FINISH      Terminate and exit the program
  Use:    FI
#TAG GET
  Name:   GET         Retrieve data from a DSS file
  Use:    GE[.options],[parameters]

  Description:   Retrieves  data from  a  DSS data  file.   The  data may  be
                 time-series, or paired-function  data ( eg. rating tables or
                 polynomial coefficients ).
  Options:
            P    Includes the value  just prior to the time window.
            N    Includes the next value  after the end of the time window.
                 P and  N  may be  used together.
  Parameters: GE[.options] label=[filename:]pathname
          "label"   is an alphanumeric identifier for the data.
          "filename"  is   the  DSS  file   name  to  use  and   it  will  be
                      automatically opened  if  necessary.   If omitted,  the
                      previously opened DSS file is used.
          "pathname"  may  be  an explicit  pathname  or  a  pathname catalog
                      number,  or the  previously specified  pathname  may be
                      modified by specifying replacement pathname parts.  If,
                      for example, the previously defined pathname were:
                      /SCIOTO/CISG3/FLOW/01FEB1986/1HOUR/OBS/
                      and the following were specified:  B=HIGH3
                      then the new specification would become:
                      /SCIOTO/HIGH3/FLOW/01FEB1986/1HOUR/OBS/
#TAG HELP
  Name:   HELP      List commands
  Use:    HE,[parameters]

  Description:   Displays on-line documentation for a command or function. If no
                 parameter is given, a list of commands is displayed.  In order
                 to get a list of the functions, enter "HE FUNCTION".
  Parameters:
      "name"     Command or function name for which a detailed description is
                 needed.
      FUNCTION   Will display a listing of the available DSSMATH functions.
#TAG PUT
  Name:   PUT    Store data in a DSS file
  Use:    PU[.options],[parameters]

  Description:   The PUT  command is  used to take   the data  in a  variable
                 label  and  store it  in a  DSS  file if  no  parameters are
                 specified, the data will be stored in the variables pathname
                 if one has been given or in the last pathname defined.
#BREAK
  Options:
            A    All data in the  time-series identified by  label is written
                 out to the DSS file  "filename" and DSS  record   pathname,
                 replacing any existing data.
            R    Replaces existing  data but it  will not write  out new  DSS
                 records consisting entirely of missing values.
            M    Same as  option R,  except that  existing data  will not  be
                 replaced by a missing value.
                 Default is to replace only missing values; existing non-missing
                 values will not be replaced.
  Parameters:
          "label"     identifies the time series to be written
          "filename"  is the name  of a DSS file to receive the  data.  If it
                      is not  specified, then the  last previously referenced
                      "filename"  will  be  used.    The  DSS  file  will  be
                      automatically opened, if necessary.
          "pathname"  is a  definition of  the pathname  to use.   The   full
                      pathname may be  explicitly defined, or pathname  parts
                      may  be  used to  modify  the  last  previously defined
                      pathname or the  pathname associated with the label, if
                      defined.
#TAG SE
  Name:   SEtpd  Set date and time to write regular time series data
  Use:    SE,parameters

  Description:  The SETPD command is used to specify a time and date
                to be used to write the regular time series data that is
                specified on the following "PUT" command.  The SETPD
                "Set Put Date" command is turned off after the PUT command
                is executed.

  Parameters:
           "time"     24 hour military time in the form HHMM
           "date"     date in the form DDMMMYYYY

  Example:       SETPD 0100 01jan2000

#TAG SD
  Name:   SD     Set data descriptions
  Use:    SD,[parameters]

  Description:   Data  descriptions  are data  items  contained  in  DSS time
                 series and paired function headers.  The SD command is used
                 to set this data descriptions for the specified label.
  Parameters:
          "label"       is the DSSMATH label for data.
          "parameter"   Indicate which items  to change and what  the new
                        values   are.      "parameter"   has   the   form
                        "item"="value",  where "item"  is  TYPE or  UNITS
                        for time  series data and  TYPE, UNITS  or LABELS
                        for paired function  data.   The designation  for
                        "item" may be abbreviated, such as U= for UNITS=.
                        "value"  is an  appropriate  entry  for  the
                        particular "item".     For paired  function data,
                        enter  one "value"  for each  curve  in a  series
                        separated by commas.  For example:  U=FEET,CFS.
#TAG SMISSING
  Name:   SMISSING     Set missing value indicators
  Use:    SM,[parameters]

  Description:   Missing value indicators are used to define the numeric values
                 with which missing data is indicated.  Up to 10 numbers can
                 be specified.  If no parameters are specified, default values
                 -901.0 and -902.0 are used.  Note:  DSS will only accept
                 the default values of -901.0 and -902.0 as valid, therefore
                 be careful about writting data to your DSS file if you have
                 changed the default values.

  Parameters:
                "parameter"   All valid numeric values.

#TAG SHOW
  Name:   SHOW      Display a catalog of a DSS file
  Use:    SH,[parameters]

  Description:   Displays   selected  internal  information  about  the  data
                 variable  denoted as a  parameter to the SHOW  command.  Its
                 main use  is for debugging.   However, this  command is  the
                 onlyh way to see the value of a scalar  variable.  For time-
                 series it shows  the data's array position, time  ( internal
                 representation), time (external  representation), value, and
                 data quality flag.  For paired data, it shows the DSS header
                 information.
  Parameters:
          None        No action is taken.
          label       Label is  the name of  the data variable  that will  be
                      displayed.
          SCALARS     Displays all the scalar variables and their values.
  Example:
          SH  STG
#TAG SP
  Name:   SP     Set data pathname
  Use:    SP,[parameters]

  Description:   The SP command is used to define or set the  default pahname
                 for a variable label name.
  Parameters:
          "label"         is the DSSMATH label for data.
          "parameter"     consists of  either a pathname or  a pathname part.
                          If  "parameter"   is  a  part,  it   has  the  form
                          "part"="value", where "part" is  A, B, C, D, E,  or
                          F,  and  "value"  is  appropriate.   If  parts  are
                          specified,  the resulting  pathname  for  the  data
                          consists of  the current default  pathname modified
                          by replacement of the specified parts.
#TAG STATUS
  Name:   STATUS      Display key program variables states or values
  Use:    ST[.options],[parameters]

  Description:   The status command may be used to check on  the state of key
                 variables and  to show  data descriptions.   Those functions
                 are indicated with command options and parameters:
  Options:
             P   display pathname  for variable.
             H   display data descriptions (DSS header contents).
  Parameters:
             None See description for ALL below.
             VAR  Memory allocations, labels and associated header information.
             TIM  Show the current  time window setting.
             PA   Show the current pathname.
             ALL  Show all of the above.
          "label" Show  information indicated  by options above.
#TAG TABULATE
  Name:   TABULATE    Tabulate values of time-series or paired data
  Use:    TA,[.options],[parameters]

  Description:   Tabulates the data represented by the variable label.  Up to
                 seven records may be tabulated.  Both time series and paired
                 function data may be tabulated.  See related commands
                 'CMISSING' and 'DECIMAL'.
  Options:
             F   Send output to a file.  It is required that the output
                 file be specified on the execution line with the
                 TABLE=filename parameter for this option to work.
             N   Turn off page and legend output.  This option is only
                 valid for time-series data.
             M   Output only missing values.
             H   Force legend output when "N" option is used.
  Parameters:
             "label"  Up to seven data labels may be specified.
  Example:
           TA OFLOW,IFLOW,STOR
#TAG TABFILE
  Name:   TABFILE     Set the output tabulate file name
  Use:    TA,[parameters]

  Description:   Used to set the file name to be used with the TABULATE command
                 ".F" option.
  Parameters:
             "file name"  Limited to no more than 79 characters
  Example:
           TABF BRANDON.TAB
#TAG CMISSING
  Name:   CMISSING  Set missing character string to use in tabular output.
  Use:    CM,[parameters]

  Description:   Used to set a string (8 characters max) which will be used
                 in the tabular output when a variable is equial to one of
                 the missing data values.
  Parameters:
             None      Will set it to "M".
             "string"  Up to eight character may be specified.
  Example:
           CM -M-
           CM 0.0
#TAG DECIMAL
  Name:   DECIMAL   Set decimal places to use in tabular output.
  Use:    DE,[parameters]

  Description:   Used to set the number of decimal places to print for each
                 variable label that is being tabulated.  The tabulation
                 fields are a fixed width of 13 characters, therefore the
                 user should take care that the maximum values to be tab-
                 ulated will fit within the fixed width.  This command is
                 only valid for time-series data.
  Parameters:
             None     Will set all decimal places to 3.
             n,m,...  Integer values 0 through 10.
  Example:
           DE 1 1 4
#TAG TIME
  Name:   TIME      Set a time-window for time-series data.
  Use:    TI,[.options],[parameters]

  Description:   Starting  and ending times  and dates may be  expressed in a
                 variety of  ways, including implicit and  relative times and
                 dates:

  Options:
             N   Do not clear the time-series variables.
  Parameters:
          04MAR1983 0700  Complete, explicit expression.
          D 0700          current date, time explicit
          D               current date, time implicit (2400)
          T               current date and time
          T-2H            two hours ago
          T-3D            three days ago
          T-15M           15 minutes ago
          D-30D           30 days ago, 2400 hrs
          -D +D           expands the existing time window one day at each end
          T-1M            one month ago
          T-1Y            one year ago
#TAG $CO
  Name:   $CO    Resume processing subsequent to error
  Use:    $CO

  Description:   Recognized  only in a  batch job  or when  a PREAD  macro is
                 being used.  Used to designate a point in  the input command
                 stream  to  resume processing  when  a  preceding  error has
                 caused processing to terminate.
#TAG $AB
  Name:   $AB    Abort (stop) processing subsequent to error
  Use:    $AB

  Description:   Recognized  only in  a batch job  or when  a PREAD  macro is
                 being used.  Used  to specify termination of  the job if  an
                 error is  encountered while processing according  to a batch
                 input stream.
#TAG ACC
  Name:              ACC       Running accumulation
  Use:     CO TY=ACC(TX)

  Description:       Compute  a running accumulation of the values in  TX and
                     store the result in TY.  If a TX value is undefined or a
                     concurrent IF  condition is not satisfied,  the value of
                     TX   is  not   added   to  the   accumulation   and  the
                     corresponding TY  remains the  same as the  previous TY.
                     Units of TY are the same as those of TX.  If TX is typed
                     as PER-AVER  or PER-CUM, TY  will be  typed INST-VAL  or
                     INST-CUM, respectively.
#TAG CMA
  Name:    CMA       Centered moving average smoothing
  Use:     CO TY=CMA(TX,NP[,CLEVEL])

  Description:       Compute  a centered, moving  average of NP  values in TX
                     and store in TY.  NP must be odd and greater than 2. The
                     default  CLEVEL  is  "LEVEL3"  and NP/2  values  at  the
                     beginning and end  of TY will be undefined.   If a value
                     in TX is  undefined or a concurrent IF condition  is not
                     satisfied, then the resulting TY values are the averages
                     of  one  less value.    TX  must  be a  regular-interval
                     time-series  and TY and  TX cannot be the  same.  Useful
                     for    filtering     instantaneous    data    containing
                     high-frequency  variations.      Units  and   type   are
                     unchanged.  The following levels are available:
#BREAK
    LEVEL1           Only valid values will be  averaged.  Valid values  that
                     do  not   have  all  valid values  within  the averaging
                     period  number will be missing.  Values at the start and
                     end of the data that do  not have enough valid values to
                     average will be assigned missing values.
    LEVEL2           Only  valid values will be averaged.   Valid values that
                     do not have all valid values within the averaging period
                     number will be  missing.  Valid values at the  start and
                     end of the data that  do not have enough valid values to
                     average will be averaged over a reduced number of values.
    LEVEL3           (Default  setting)  All values will be averaged based on
                     valid values within the averaging period number.  If all
                     values are missing for the period number, the value will
                     be missing.   Values at  the start and  end of the  data
                     that  do not have enough valid values to average will be
                     assigned missing values.
    LEVEL4           All values will be averaged based on valid values within
                     the averaging period number.  If  all values are missing
                     for  the  period number,  the  valuje  will be  missing.
                     Values at the start and end of the data that do not have
                     valid  values to  average will  be averaged  based  on a
                     reduced number of values.
 Note: Questinable and estimates flagged values are used in computations.
#TAG DDT
  Name:    DDT       Differences per unit time
  Use:     CO TY=DDT(TX)

  Description:       Computes  the  successive differences  in  TX  per  time
                     period:
                     TY(t)=(TX(t)-TX(t-1))/DT
           where DT  is the time difference  in days between t and  t-1. If a
           value of  TX is undefined  TY is  undefined.  If  a concurrent  IF
           condition is not satisfied, TY is unchanged.  TY and  TX cannot be
           the same variable.  TY is assigned the type 'PER-AVER.'  The units
           of  TY are  undefined.   A an  example of  the use  of DDT  is the
           computation of  reservoir inflow  from outflow  and the change  in
           storage, where  the change  in storage  is transformed  to average
           flow by the function.
#TAG DECPAR
  Name:    DECPAR    Decaying basin wetness parameter
  Use:     CO TY=DECPAR(TY,TZ,R)

  Description:       Compute a time-series of  parameters TY as a function of
                     TZ and R:
           TY(t)=R*TY(t-1)+TZ(t)
           where R is the decay rate and TZ is precipitation.  R is less than
           1.  The function extends TY:  the first value  in the series TY is
           used as the starting value,  and any other TY are computed  in the
           sequence.  If the first value in TY is undefined, it is assumed to
           be  zero.   The first  TZ value  is ignored.   TY  and TZ  must be
           regular-interval  time series with  identical times.   R should be
           appropriate  for the  interval.   The  type  and units  of  TY are
           unchanged.  An IF condition has no effect.
#TAG DIFF
  Name:    DIFF      Successive differences
  Use:     CO TY=DIFF(TX)

  Description:       Compute the  successive differences  of TX and  store in
                     TY.  TX and TY cannot be  the same variable.  TX must be
                     of type  INST-VAL or  INST-CUM.   If  a value  of TX  is
                     undefined, resulting values of TY  are undefined.  If  a
                     concurrent  IF   condition  is  not   satisfied,  TY  is
                     undefined.  The type and units of TY are undefined.
#TAG DIFF1
  Name:    DIFF1     Successive differences per cumulative time period
  Use:     CO TY=DIFF1(TX,TIME,NVPTP,[TREAT])

  Description:       Compute the  successive differences  of TX and  store in
                     TY.  TX and TY cannot be  the same variable.  TX must be
                     of type  INST-VAL or  INST-CUM.   If  a value  of TX  is
                     undefined, resulting values of TY  are computed based on
                     the option selected under the TREAT parameter.  Parameter
                     TIME is the time (Military 24hour style) of the start or
                     first cumulative value of the time period.  Parameter
                     NVPTP is the number of values per cumulative time period.
                     Parameter TREAT is optional and can be left out.  If it
                     is left out; missing values will be computed as missing
                     and the next valid value will be set to missing except
                     for the first value of the time period.  If TREAT is set
                     to AVERAGE, all missing values previous to a valid value
                     will be set equal to the average value based on the
                     valid value divided by the number of missing plus one.
                     If TREAT is set to TOTAL, all missing values will remain
                     missing, but valid values after a missing will be computed
                     instead of being set to missing.

 Example: COMP TY=DIFF1(TX,0100,4,AVERAGE)
#TAG EDPD
  Name:    EDPD      Edit paired data values
  Use:     CO JUNK=EDPD(PD,CVI,DVI,XVAL,YVAL)

  Description:       This function allows for the editing of any value in a
                     paired data variable.  PD is the label of the paired data,
                     CVI is the curve number, DVI is the data index value
                     or an "S" can be used to cause the function to search
                     for the index based on what is entered for XVAL,
                     XVAL is the value for x-axis or an "N" can be entered
                     which will cause the function not to alter the x value,
                     and YVAL is the value for the y-axis data.

 Example: COMP JUNK=EDPD(PD1,1,25,125.25,MAXEL)
          COMP JUNK=EDPD(PD1,2,SEARCH,125.25,MAXEL)
          COMP JUNK=EDPD(PD1,2,25,NO,125.25,MAXEL)
#TAG ESTLIN
  Name:    ESTLIN    Estimate values for missing data
  Use:     CO TY=ESTLIN(TX,NMAX,QFLAG)

  Description:       Linearly interpolate  estimates for  values in  TX  with
                     flags  equal or lesser in quality to QFLAG and place the
                     results  in TY.   Do  not estimate  more that  NMAX con-
                     tinuous  missing values.   Possible  flags, in  order of
                     decreasing  quality,  are:  Q  = questionable  and  M  =
                     missing.  An IF condition  has no effect.  TX must  be a
                     time-series, and  TX and  TY may  be the same  variable.
                     Type and units of TY are the same as TX.
#TAG ESTPPT
  Name:    ESTPPT    Estimate values for missing precipitation data
  Use:     CO TY=ESTPPT(TX,NMAX,QFLAG)

  Description:       Linearly    interpolate    estimates   for    cumulative
                     precipitation values  in TX with quality  flags equal to
                     or lesser in  quality to QFLAG and place the  results in
                     TY.   Possible  flags, in  order of  decreasing quality,
                     are: Q = questionable  and M = missing.   If the  values
                     bracketing the missing period are increasing with  time,
                     do  not  estimate  more  that  NMAX  continuous  missing
                     values.  If the values bracketing the missing period are
                     equal, then estimate  any number of missing values.   If
                     the values bracketing  the missing period are decreasing
                     with  time, do not estimate any missing values.  TX must
                     be a  data type  of INST-CUM.   An IF  condition has  no
                     effect.
#TAG FMA
  Name:    FMA       Forward moving average
  Use:     CO TY=FMA(TX,NP)

  Description:       Compute a moving average of the last NP values in TX and
                     store in TY.  NP must greater  than 2.  NP values at the
                     beginning of  TY will be missing.   If a value  in TX is
                     missing, the value is not used for computing TY, and the
                     average is over one less value.  At least 2 values of TX
                     must  be  defined, else  TY  is  missing.    Useful  for
                     computing  flow  durations.     Also,  may  be  used  to
                     determine  parameters  for use  in  the  SCR2  screening
                     function.  Units and type are unchanged.
#TAG GENTSR
  Name:    GENTSR    Generate a regular interval time series
  Use:     CO TY=GENTSR(DT,TOFF,Y0,QFLAG)

  Description:       Generate a  new, regular-interval time series  TY with a
                     time interval of  DT, a time interval offset of  TOFF, a
                     constant  value Y0,  and all  values  internally flagged
                     with  QFLAG.   TOFF is  time from  the beginning  of the
                     standard interval to the actual time of the data. DT and
                     TOFF are expressed as units of time as nnT, where T is M
                     for  minutes, H  for hours,  and D  for days.   Possible
                     flags are:  N = none, M = missing, E = estimated, and  Q
                     =  questionable.   If  Y0 is  -901.,  then the  flag  is
                     automatically   M.     Units  and   type  must   be  set
                     independently (use SD). An IF condition has no effect.
#TAG GENTSIR
  Name:    GENTSIR    Generate an irregular interval time series
  Use:     CO TY=GENTSIR(DT,CFLAG,Y0,QFLAG)


  Description:       Generate a new, irregular-interval time series TY with a
                     time interval of DT, a compute flag of  CFLAG (I,N,Y,M),
                     a constant value Y0, and all  values  internally flagged
                     with QFLAG.  DT is  expressed  as nnT,  where T is M for
                     minutes,  H  for hours,  and D for  days. Possible QFLAG
                     flags are:  N = none, M = missing, E = estimated, and  Q
                     =  questionable.   If  Y0 is  -901.,  then the  flag  is
                     automatically  M.  The following flags are available for
                     CFLAG:
                           I  -  Generated  time series  will start  at
                                 exactly the starting time window date and
                                 time and proceed at the interval specified.
                           N  -  Generated time series will start at a valid
                                 regular time series starting time and date
                                 and proceed at the interval specified.
                           Y  -  Generated time series will start at 2400
                                 and a date equal to one interval from the
                                 start of the time window and at the end of
                                 each year the last interval is adjusted so
                                 that the next date and time start on the
                                 same date and time for all years covered by
                                 the time window.
                           M  -  Generated time series will start at 2400
                                 and a date equal to one interval from the
                                 start of the time window and at the end of
                                 each month the last interval is adjusted so
                                 that the next date and time start on the
                                 same date and time for all months covered by
                                 the time window.
                     Units and type must be  set independenly with the SD
                     command.  An IF condition has no effect.
#TAG MATE
  Name:    MATE      Generate data pairs from two time-series
  Use:     CO PF=MATE(TX,TY,SORT/NOSORT)

  Description:       Derive  a paired-function  PF by  pairing values  in the
                     time series  TX and  TY.   TX  and TY  values must  have
                     identical times.   (Functions TS1 and TS4 may  be useful
                     in  conjunction with MATE).   The paired data are sorted
                     into  ascending order of  TX if SORT is  specified.  The
                     units of PF are respectively the same as those of TX and
                     TY.  The types of PF are undefined.  An IF condition has
                     no effect.
#TAG MAX
  Name:    MAX       Maximum value in a time series
  Use:     CO SY=MAX(TX)

  Description:       Find the maximum value in time-series TX and place it in
                     scalar SY.   Ignore missing values  or values concurrent
                     with an unsatisfied IF condition.
#TAG MEAN
  Name:    MEAN      Mean value in a time series
  Use:     CO SY=MEAN(TX)

  Description:       Compute  the mean value in  time-series TX and place the
                     result in  scalar SY.   Ignore missing values  or values
                     concurrent with an unsatisfied IF condition.
#TAG MIN
  Name:    MIN       Minimum value in a time series
  Use:     CO TY=MIN(TX)

  Description:       Find the minimum  value in time-series TX  and place the
                     result  in scalar SY.   Ignore missing  values or values
                     concurrent with an unsatisfied IF condition.
#TAG LAST
  Name:    LAST      Last valid value in a time series.
  Use:     CO LASTV=LAST(TX)

  Description:     Find the last valid value in time-series TX and place it in
                   scalar LASTV.   Ignore missing values or values concurrent
                   with an unsatisfied IF condition.
#TAG MRG
  Name:    MRG       Merge two time series
  Use:     CO TY=MRG(TX,TZ,QFLAG)

  Description:       Merge TX  with TZ.  TY includes all values in TX and TZ,
                     except where TX and TZ occur at the same time.   In that
                     case, the value for TX is used unless it is flagged with
                     a quality equal to or less than QFLAG and  TZ is flagged
                     with a quality greater  than QFLAG.  Possible  flags, in
                     order  of  decreasing quality,  are:  N =  no flag,  E =
                     estimated,  Q =  questionable and  M =  missing.   An IF
                     condition has no effect.   The type and units  of TY are
                     undefined.
#TAG MRGP
  Name:    MRGP      Merge two paired data series
  Use:     CO PY=MRGP(PX,PZ,NCURVE)

  Description:       Merge PZ  with PX.  PY includes all values in PX and the
                     curve  specified by the index curve number NCURVE in PZ.
                     It is required that PX and PZ  have  the  same number of
                     data values and that the X axis values  for both PX and
                     PZ are identical.  NCURVE is used  to specify  the curve
                     number data in PZ that is to be merged with PX.  A value
                     of 0 for NCURVE signifies  that  all curves in PZ are to
                     be merged with PX.
#TAG COMBP
  Name:    COMBP     Combine two paired data curves
  Use:     CO PY=COMBP(PX,PZ,NOPTION)

  Description:       Combine or append PZ to PX in ascending or dscending order.
                     This function has five possible ways of combining the
                     independent variable in PZ and PX and requires that they
                     have the same number of dependent curves. Computed
                     variable PY can be set to PZ or PX only if PZ and PX
                     consist of one single curve.  The following is a
                     description of the valid options:

     Option Value           Description
          1        Combine based on ascending order of data in the
                   independent variable.  Data that overlaps on the
                   second variable are deleted.
          2        Combine based on ascending order of data in the
                   independent variable.  Data that overlaps on the
                   first variable are deleted.
          3        Combine based on dsending order of data in the
                   independent variable.  Data that overlaps on the
                   second variable are deleted.
          4        Combine based on dsending order of data in the
                   independent variable.  Data that overlaps on the
                   first variable are deleted.
          5        Default if no value is entered. Combines based
                   on the order of the paired data variables, without
                   regard to data in the independent variable.

           Example:

                   independent variable curve1 1 2 3 5 6
                   independent variable curve2 3 4 6 7 8
                   result with option set to 1
                     1 2 3 5 6 7 8
                   result with option set to 2
                     1 2 3 4 6 7 8
                   result with option set to 5
                     1 2 3 5 6 3 4 6 7 8
#TAG OLY
  Name:    OLY       Olympic smoothing
  Use:     CO TY=OLY(TX,NP[CLEVEL])

  Description:       Compute a smoothed time-series from TX using the Olympic
                     smoothing scheme:    same as  centered,  moving  average
                     except the minimum and maximum values in the span NP are
                     ignored.   Place the result in  TY.  Units  and type are
                     unchanged.  The following levels are available:
#BREAK
    LEVEL1           Only valid values  will be averaged.   Valid values that
                     do  not   have  all  valid values  within  the averaging
                     period  number will be missing.  Values at the start and
                     end of the data that  do not have enough valid values to
                     average will be assigned missing values.
    LEVEL2           Only valid values  will be averaged.   Valid values that
                     do not have all valid values within the averaging period
                     number will be  missing.  Valid values at the  start and
                     end of the data that  do not have enough valid values to
                     average will be averaged over a reduced number of values.
    LEVEL3           (Default setting)  All values will be  averaged based on
                     valid values within the averaging period number.  If all
                     values are missing for the period number, the value will
                     be missing.   Values  at the start  and end of  the data
                     that  do not have enough valid values to average will be
                     assigned missing values.
    LEVEL4           All values will be averaged based on valid values within
                     the averaging period number.   If all values are missing
                     for  the  period number,  the  valuje  will be  missing.
                     Values at the start and end of the data that do not have
                     valid  values to  average  will be  averaged based  on a
                     reduced number of values.
 Note: Questinable and estimates flagged values are used in the computations.
#TAG OPEN

  Name:    OPEN      Open a DSS file
  Use:     OP mastdb.dss

  Description:     The OPEN command is used to open a new DSS file.  A maximum
                   of five DSS files can be kept open on a continuous basis.
                   The GET and PUT commands can also be used to open DSS files.


Parameters:

  "name"           The complete file name and its path.  A maximum of 64
                   characters is allowed on the DSS version and 80 characters
                   on the UNIX/"DOS Lahey" versions.

Example:    OP d:\data\mastdb.dss
#TAG PERCON
  Name:    PERCON    Period constants
  Use:     CO TY=PERCON(TS,TX)

  Description:       Generates  a series TY  at times concurrent  with TX and
                     with  values  equal  to  the  previous  chronological TS
                     value.  If no previous TS is present, then TY values are
                     undefined.      TS  and   TX   may   be  irregular-   or
                     regular-interval time  series.   An IF condition  has no
                     effect.
#TAG POLY
  Name:    POLY      Polynomial transformation
  Use:     CO TY=POLY(TX,TP)

  Description:       Compute  a  polynomial transformation  of  TX  using the
                     polynomial coefficients  TP.    Store the result  in TY.
                     If  a  TX  value  is missing  TY  is  undefined.    If a
                     concurrent  IF   condition  is  not   satisfied,  TY  is
                     unchanged.  Units and type of  TY are defined by TP.  TP
                     can be created with the utility DSSPD.
#TAG POLY2
  Name:    POLY2     Polynomial transformation with integral
  Use:     CO TY=POLY2(TX,TP)

  Description:       Compute  a polynomial  transformation of  TX using   the
                     integral of the  polynomial defined by  coefficients TP.
                     Store the result in TY.  If a TX value is missing  TY is
                     undefined.    If  a   concurrent  IF  condition  is  not
                     satisfied,  TY  is  unchanged.      Units  and type  are
                     unchanged.  TP can be created with the utility DSSPD.
#TAG QAC
  Name:    QAC       Flow accumulator gage processor
  Use:     CO TY=QAC(TX,TC)

  Description:         Compute  period-average flows from  a flow accumulator
                     type gage:
           TY(t) = (TX(t)-TX(t-1))/(TC(t)-TC(t-1))
           TX  and TC are  respectively, time series of  the accumulated flow
           and the count.  TX and TC values must occur at the same times.  If
           corresponding values  for TX  and TC  decrease from  the  previous
           period, then the  accumulation is assumed to have reset to zero at
           the beginning of the interval.  An IF condition has no effect.  TY
           is assigned the type 'PER-AVER.'
#TAG RND
  Name:    RND       Round off
  Use:     CO TY=RND(TX,NDIG,IPLAC)

  Description:       Round off  values to NDIG or  IPLAC, whichever controls.
                     NDIG  is the number of digits  to round to and can range
                     from 1 to  8.  IPLAC is  a magnitude of  10 to which  to
                     round  to:  for  example, -1 specifies  rounding to one-
                     tenth (0.1).   The number of digits shown is  never less
                     than 1, however.   The following example illustrates the
                     effects on  rounding if NDIG=3 and  IPLACE=0 (ie., round
                     to ones place):
                      rounds  to
           1445.1        "      1450.
           144.51        "       145.
           14.451        "        14.
           1.4451        "         1.0
           If TX is undefined, TY is undefined.  If a concurrent IF condition
           is unsatisfied, TY is unchanged.
#TAG RTABLE
  Name:    RTABLE    Rating table interpolation
  Use:     CO TY=RTABLE(TX,TB,[EXTRAPOLATE, EXTEND, or MISSING] )

  Description:       Interpolate values for  TX using table TB and  store the
                     result  in TY.   TB  must be  created using  the program
                     DSSPD (use   R option) with specific  information in the
                     header:   type  of  interpolation,  offset,  shift,  and
                     datum.   If the type of interpolation is LOGLOG, table x
                     values  are adjusted  by  subtracting the  offset.   The
                     shift  is added  to and  the datum  subtracted  from all
                     incoming TX values.   The header information in  TB also
                     defines the units of TY.
                     The third parameter is optional and if not entered it is
                     set to extrapolate values that fall outside the limits
                     of the rating curve.  EXTEND will cause all values that
                     fall outside the limits of the rating curve to be set
                     to the first or last value defined by the rating curve.
                     MISSING will cause all values that fall outside the
                     rating curve to be set to missing values.
#TAG RTABLR
  Name:    RTABLR    Reverse rating table interpolation
  Use:     CO TY=RTABLR(TX,TB)

  Description:       Interpolate values for TX using the reverse  of table TB
                     and store  the result in  TY.  TB must  be created using
                     the program DSSPD (option /R) with specific  information
                     in the  header:   type of interpolation,  offset, shift,
                     and  datum.   If the  type of  interpolation is  LOGLOG,
                     table x  values are adjusted by  subtracting the offset.
                     The  shift is subtracted from and the datum added to all
                     resulting TX values.   The header information in TB also
                     defines the units of TY.
                     All values that fall outside the rating curve will be
                     extrapolated.
#TAG RTABL2
  Name:    RTABL2    Two-variable rating table interpolation
  Use:     CO TY=RTABL2(TX,TZ,TB)

  Description:       TY is a function of two independent variables TX and TZ.
                     The functional relationship  is specified  by the  table
                     TB, which consists of sets of TX/TY pairs, each set cor-
                     responding  to a  TZ  value.   TB  is created  with  the
                     program DSSPD  (option /R) with values  for TZ specified
                     as  labels for the sets of TX/TY pairs.  RTABL2 interpo-
                     lates linearly in table TB.   No extrapolation is  done:
                     if the TX or  TY value are outside the range  bounded by
                     TB, TY is set to missing.   TX and TZ must be concurrent
                     time series.  The  header information in TB also defines
                     the units of TY.
#TAG SCRN1
  Name:    SCRN1     Screen for possible erroneous values
  Use:     CO TY=SCRN1(TX,XMIN,XMAX,MAXDEL,QFLAG)

  Description:       Flag any value in TX that falls outside the range XMIN -
                     XMAX or  exceeds the maximum  change  MAXDEL   from  the
                     previous  value.   The maximum change comparison is done
                     only  when  the  consecutive  values  are  not  flagged.
                     Possible values for QFLAG  are: M = missing data  or Q =
                     questionable.  The result is placed in TY.
#TAG SCRN2
  Name:    SCRN2     Screen for possible erroneous values
  Use:     CO TY=SCRN2(TX,NPTS,MAXDEL,QFLAG)

  Description:       Flag  any value  in TX that  exceeds the  maximum change
                     MAXDEL from the forward moving average of NPTS ending at
                     the  previous  value.   Missing  values  in  TX are  not
                     counted in the  moving average  and the  divisor of  the
                     average is  less one for  every missing  value.   Values
                     which  fail the screen are not counted either.  At least
                     2  values must  be defined  else  the moving  average is
                     undefined and  the screen passes the  relevant TX value.
                     Possible   flags  are:  M   =  missing   data  or   Q  =
                     questionable.   The result is  placed in TY.   SCRN2  is
                     useful  for  detecting and  removing  spikes.   The  FMA
                     function may be useful for determining  appropriate NPTS
                     and MAXDEL parameters.
#TAG SHIFT
  Name:    SHIFT     Shift adjustment
  Use:     CO TY=SHIFT(TS,TX)

  Description:       Generate  a time  series  of shift  adjustments  TY with
                     times at  TX and  actual shifts  TS, possibly  at  other
                     times.   TX and  TY cannot  be  the same  variable.   TS
                     values are interpolated at  TX times.  The interpolation
                     is  linear between  TS values,  except  when TX  time is
                     greater then last TS time.   Then, the last value of  TS
                     is  held constant  for the  remaining TX  times.   If no
                     previous TS value  brackets TY, then TY is set  to zero.
                     An IF condition has no effect.
#TAG TS1
  Name:    TS1       Interpolated data at regular intervals
  Use:     CO TY=TS1(TX,DT,TOFF)

  Description:       Derive a new, regular-interval time series TY  from  TX.
                     TY will have  a a time span defined by  the current time
                     window,  a time  interval  of DT,  and  a time  interval
                     offset of TOFF.  TOFF  is time from the beginning of the
                     standard interval to the actual time of the data. DT and
                     TOFF are expressed as units of time as nnT, where T is M
                     for minutes,  H for hours, and  D for days. TX  may be a
                     regular- or irregular-interval  time-series.  Units  and
                     type are preserved.  An IF condition has no effect.
#TAG TS2
  Name:    TS2       Period averages at regular intervals
  Use:     CO TY=TS2(TX,DT,TOFF)

  Description:       Derive a new, regular-interval  time-series TY  from the
                     instantaneous  values in TX with a  time span defined by
                     the current time  window, a time interval of DT,  and an
                     interval  offset  of  TOFF.    TOFF  is  time  from  the
                     beginning of the interval.  DT and TOFF are expressed as
                     units of  time as nnT, where  T is M for  minutes, H for
                     hours, and D for days.  TOFF is time  from the beginning
                     of the standard interval to the actual time of the data.
                     TX may be an  irregular or regular time-series, but must
                     be  of  type  INST-VAL.    TY  will be  typed  PER-AVER.
                     Example of use: deriving  daily average flow from hourly
                     observed values.  An IF condition has no effect.
#TAG TS3
  Name:    TS3       Period mins or maxs at regular intervals
  Use:     CO TY=TS3(TX,DT,TOFF,EXT)

  Description:       Finds  either  the   minima  or  maxima  in  TX   at  DT
                     intervals, with  interval offsets at TOFF,  and puts the
                     result in TY.   EXT is  used to indicate the  extreme of
                     interest:  'MIN' or 'MAX'.  DT and TOFF are expressed as
                     units of  time as nnT, where  T is M for  minutes, H for
                     hours, and D for days.  TOFF is  time from the beginning
                     of the standard interval to the actual time of the data.
                     TY  is typed PER-EXTR.   Example of use:   finding daily
                     minima   and    maxima   from    hourly    instantaneous
                     observations.  An IF condition has no effect.
#TAG TS4
  Name:    TS4       Interpolated data at irregular intervals
  Use:     CO TY=TS4(TX,TZ)

  Description:       Derive a new, irregular-interval  time series TY from TX
                     at the times for TZ (ie., TZ provides the time pattern).
                     Units  and type are  preserved.  An IF  condition has no
                     effect.
#TAG TSHIFT
  Name:    TSHIFT    Shift time series in time
  Use:     CO TY=TSHIFT(TX,DT)

  Description:       Derive  a time series TY by  shifting times in TX by DT.
                     DT is specified in the  form nnT, where nn is the number
                     of time units T and T may be M for minutes, H for hours,
                     or  D for days.   Units and  type are preserved.   An IF
                     condition has no effect.
#TAG TSNAP
Name:       TSNAP     Snap Irregualar times to nearest Regular time period.
Use:        CO  TY=TSNAP(TX,DT,TOFF,TBACK,TFORWARD)

Description:      Derive a new regular time series from existing time-series
                  TX.  TX may be regular or irregular.  The new time series
                  will be at a time interval of DT, interval offset of
                  TOFF, back time window TBACK, and forward time window
                  TFORWARD.  DT, TOFF,TBACK, and TFORWARD have to be expressed
                  in MIN(minutes), HOUR(hours), DAY(days), WEEK(weeks),
                  MON(months), or YEAR(years).

Example:   TY=TSNAP(TX,1H,0H,15MIN,5MIN)
#TAG TTSR
Name:       TTSR      Transform Time Series to Regular
Use:        CO  TY = TTSR ( TX, DT, TOFF, FUNCT, TREAT, TYPE )

Description:      Derive a new regular time series from existing time-series
                  TX.  TX may be regular or irregular.  The new time series
                  will be at a time interval of DT, and an interval offset of
                  TOFF.  DT and TOFF must each be expressed in the form  nnT,
                  where T may be MIN, HOUR, DAY, WEEK, MON, or YEAR ( e.g.
                  1DAY ).  FUNCT is one of the following:

                              INT - Interpolation at end of interval
                              MAX - Maximum over interval
                              MIN - Minimum over interval
                              AVE - Average over interval
                              ACC - Accumulation over interval
                              ITG - Integration over interval
                              NUM - Number valid data over interval
#BREAK
                  TREAT controls the treatment of the new generated data value
                  when missing data occur in the interval.  It must be
                  expressed in either the form  nn#  or  nn%.  If nn# is used
                  nn gives the number of missing data values in the interval
                  that will be accepted in the computation of the new value.
                  If nn% is used nn gives the percent of missing data values
                  in the interval that will be accepted in the computation of
                  the new value.  If the criteria is meet a data value will be
                  generated, if not a missing value will occur.
                  TYPE provides the user control to override how the
                  interpolation and processing of data occurs.  TYPE must be
                  one of the following: DEFAULT, INST-VAL, PER-AVER, or PER-
                  CUM.  If DEFAULT is used, processing depends on the data
                  type stored in the DSS data record.  Otherwise processing
                  will be performed as if the data type were as given by TYPE.
                  Data type INST-VAL considers the data to change linearly
                  from the previous data value to the current data value over
                  the interval.  Data type PER-AVER considers the data to be
                  constant at the current data value over the interval.  Data
                  type PER-CUM considers the data to increase from zero (0.0)
                  up the current value over the interval.
Example:          CO  TY = TTSR ( TX, 1DAY, 0MIN, AVE, 10%, DEFAULT)
#TAG TTSI
Name:             TTSI        Transform Time Series to Irregular
Use:              CO  TY = TTSI ( TX, TZ, FUNCT, TREAT, TYPE )

Description:      Derive a new irregular time series from existing time-series
                  TX.  TX may be regular or irregular.  TZ is an existing
                  time-series at the desired new spacing of TY.  All other
                  parameters are as shown for the function TTSR.
#TAG TSCYCL
Name:               TSCYCL         Time Series Cyclic Analysis
Use:           CO  XX = TSCYCL ( TX, TREAT, DSSFILE, STATFILE )

Description:   Derive a set of statistics from cyclic regular time series TX.
               TX must be regular data at a 1HOUR, 1DAY, or 1MONTH interval.
               The time series TX may be, for example, 30 years of 1DAY data.
               For each interval, (e.g., 1st day of the year, 2nd day of the
               year, ... , 365th day of the year ), statistics would be
               determined.  The 14 statistics determined for each interval are:
               maximum, minimum, average, standard deviation, 5%, 10%, 25%,
               50%(median), 75%, 90%, 95% percentiles, date of maximum, date of
               minimum, and number of values processed.  These results are
               written to a specified DSS file, and two text output files.  The
               variable XX is ignored.
#BREAK
               TREAT controls the treatment of newly generated statistic values
               when missing data occur in the interval. It must be expressed in
               either the form  nn#  or  nn%.  If nn# is used nn gives the
               number of missing data values in the interval that will be
               accepted in the computation of the new value.  If nn% is used nn
               gives the percent of missing data values in the interval that
               will be accepted in the computation of the new value.  If the
               criteria is met a data value will be generated, if not a missing
               value will occur.

               DSSFILE is the name of the DSS file in which the cyclic results
               will be written.  The results will be, for example, a record of
               all the maximums for each day of the year over the 30 year
               period.  Fourteen records will be added to the DSS file
               specified, each containing one of the derived statistics.  The
               records will use the pseudu year 3000 for storing the statistics.
#BREAK
               STATFILE is the base name, not more than 6 characters, of two
               files that will be written containing the same data written to
               the DSS file.  The first file will contain all of the statistics
               generated.  It will be in the form of a wide table.  Its name
               will be 'statfile.sts' or 'statfile.t' where 'statfile' is the
               portion of the name the user specifies. This file is wide, so it
               is hard to view on some systems.  The second file is a subset of
               the first named 'statfile.sum', or 'statfile.s'. The second file
               is limited to 80 columns wide for easy viewing.  The second file
               contains, maximums with their dates, minimums with their dates,
               average, and the 50% percentile(median) values.


Example:       TIME  2400  01JAN1927   2400  31DEC1990
               GET  TX = MYDSS:/MUD/MUD CREEK/FLOW//1DAY/OBS/
               CO  XX = TSCYCL ( TX, 10%, MUDDSS, MUDDY )
#TAG SQRT

  Name:    SQRT      Square Root Function
  Use:     CO TY=SQRT(TX)

  Description:       Compute the   square root  of TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.
                     If a value in TX is negative, the value in TY will be
                     set to missing.

Example:       CO TY=SQRT(100.4)
               CO TZ=SQRT(TX)
#TAG LOG10

  Name:    LOG10     Log Base 10
  Use:     CO TY=LOG10(TX)

  Description:       Compute the   log base 10  of TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.
                     If a value in TX is 0 or negative, the value in TY will be
                     set to missing.

Example:       CO TY=LOG10(100.4)
               CO TZ=LOG10(TX)
#TAG LOG

  Name:    LOG     Natural Log Base e ( 2.7182818 )
  Use:     CO TY=LOG(TX)

  Description:       Compute the natural log base e  of TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.
                     If a value in TX is 0 or negative, the value in TY will be
                     set to missing.

Example:       CO TY=LOG(100.4)
               CO TZ=LOG(TX)
#TAG ABS

  Name:    ABS      Absolute Function
  Use:     CO TY=ABS(TX)

  Description:       Compute the  absolute value of TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.

Example:       CO TY=ABS(TX)
#TAG INT

  Name:    INT      Truncate to Whole Numbers
  Use:     CO TY=INT(TX)

  Description:       Truncate to a whole number TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.

Example:       CO TY=INT(100.4)
               CO TZ=INT(TX)
#TAG NINT

  Name:    NINT      Round to Nearest Whole Number
  Use:     CO TY=NINT(TX)

  Description:       Round to nearest whole number TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.

Example:       CO TY=NINT(100.6)
               CO TZ=NINT(TX)
#TAG SIN

  Name:    SIN       Sine Trigonometric Function
  Use:     CO TY=SIN(TX)  or CO TX=ASIN(TY)  for ArcSine

  Description:       Compute the   sine  of TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.

Example:       CO TY=SIN(100.4)
               CO TZ=SIN(TX)
#TAG COS

  Name:    COS       Cosine Trigonometric Function
  Use:     CO TY=COS(TX) or CO TX=ACOS(TY)  for ArcCosine

  Description:       Compute the   cosine  of TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.

Example:       CO TY=COS(100.4)
               CO TZ=COS(TX)
#TAG TAN

  Name:    TAN       Tangent Trigonometric Function
  Use:     CO TY=TAN(TX) or CO TX=ATAN(TY)  for ArcTangent

  Description:       Compute the   sine  of TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.

Example:       CO TY=TAN(100.4)
               CO TZ=TAN(TX)
#TAG 1/X

  Name:    1/X      Inverse Function
  Use:     CO TY=1/X(TX)

  Description:       Divide  1  by variable  TX and  store in TY.
                     TX and TY can be  the same variable.  TX can be scalar,
                     time series or paired data.  If a value of TX is undefined
                     resulting values of TY  are undefined.  If  a concurrent
                     IF   condition  is  not   satisfied,  TY  is unchanged.
                     If a value in TX is zero, the value in TY will be
                     set to missing.

Example:       CO TY=1/X(100.4)
               CO TZ=1/X(TX)
#TAG MUSK

  Name:    MUSK     Muskingum Routing
  Use:     CO TY=MUSK(TX,NR,K,X)

  Description:       Route the uniform time series variable TX by the Muskingum
                     hydrologic routing method and store it in variable TY. The
                     "IF" compute options has no effect on this function.  The
                     "K" parameter is the Muskingum "k" in hours, "X" parameter
                     is the Muskingum "x" (range between 0 and .5), and "NR" is
                     the number of routing subreaches.

Example:       CO TY=MUSK(TX,3,3,.2)
#TAG PULS

  Name:    PULS     Modified Puls Routing
  Use:     CO TY=PULS(TX,PF,X,NR,STOR1,Q01)

  Description:       Route the uniform time series variable TX by the Modified
                     Puls or Working R&D hydrologic routing method and store it
                     in variable TY.  The variable PF must have been previously
                     defined in a GET command.  It references a storage-discarge
                     paired function relationship for the reach.  Storage must
                     be the first variable, discharge the second variable, and
                     each variable must repeat only once.  Variable X is the
                     wedge coefficient (Muskingum X) for use in working R&D.
                     Use 0.0 value to route by Modified Puls method. Variable
                     NR is the number of routing reaches.  STOR1 and Q01 are
                     initial storage and flow respectively.  Use a value of
                     -1 for both STOR1 and Q01 in order to use the first flow
                     value in TX and interpolates a corresponding storage value
                     from PF.  The IF compute command has no effect on this
                     function.


Example:       CO TY=PULS(TX,PF,0.0,3,-1,-1)
#TAG SS

  Name:    SS    Straddle Stagger Routing
  Use:     CO TY=SS(TX,NAVG,LAG,NR)

  Description:       Route the uniform time series variable TX by the Straddle
                     Stagger hydrologic routing method and store it in variable
                     TY.  Note: Variables TY and TX cannot be the same and
                     variable TX is permanently lagged by the SS function.
                     Variable NAVG is the number of ordinates to average.
                     Variable LAG is the number of ordinates to lag hydrograph.
                     Variable NR is the number of subreaches to use.
                     "IF" compute options has no effect on this function.

Example:       CO TY=SS(TX,3,2,1)
#TAG SSW

  Name:    SSW   Willmington District Straddle Stagger Routing
  Use:     CO TY=SSW(TX,NAVG,LAG,NR)

  Description:       Route the uniform time series variable TX by the
                     Willmington District Straddle Stagger routine method
                     and store it in variable TY.  Note: Variables TY and TX
                     cannot be the same.  This function is similar to function
                     SS except that LAG is usually zero and the result of
                     averaging NAVG values is stored in the NAVGed value.
                     For example, if NAVG is 7, the results for ordinates 13
                     through 19 is stored in ordiante 19.  For the same
                     example, if LAG is set to 2, the result is stored in
                     ordinate 21.
                     "IF" compute options has no effect on this function.

Example:       CO TY=SSW(TX,3,2,1)
#TAG COUNT

  Name:    COUNT   Count number of valid and missing values
  Use:     CO TS=COUNT(TX,TYPE)

  Description:      This function is used to count the valid and missing values
                    in time series variable TX and stores it in scalar variable
                    TS.  Possible values for TYPE are: VALID and MISSING.

Example:       CO TS=COUNT(TX,VALID)
               CO TS=COUNT(TX,MISSING)
#TAG CORR

  Name:    CORR    Compute correlation coefficients
  Use:     CO TS=CORR(TX1,TX2,INDEX)

  Description:      This function is used to compute correlation coefficients,
                    determination coefficients, and standard errors of regres-
                    sion between the two variables TX1 and TX2.  TX1 and TX2
                    must be of the same type (either uniform time series or
                    irregular time series) and contain the same number or rows
                    or ordinates.  Variable INDEX is used to set the scalar
                    variable TS as follows:

                    Index                     Description
                      1         Number of valid pairs for correlation.
                      2         Regression constant.
                      3         Regression coefficient.
                      4         Determination coefficient.
                      5         Standard error of regression.
                      6         Determinaion coefficient adjusted for degrees
                                of freedom.
                      7         Standard error adjusted for degrees of freedom.

Example:       CO TS=CORR(TX1,TX2,7)
#TAG SDEV

  Name:    SDEV  Compute the standard deviation of one independent variable.
  Use:     COMP TS=SDEV(TX)

  Description:      This function is used to compute the standard deviation of
                    one independent variable.  TX can be either regular or
                    irregular time series.  TS is a scalar and is set to the
                    computed standard deviation.

Example:       CO TS=SDEV(TX)
#TAG SKEW

  Name:    SKEW  Compute the skew coefficient of one independent variable.
  Use:     COMP TS=SKEW(TX)

  Description:      This function is used to compute the skew coefficient of
                    one independent variable.  TX can be either regular or
                    irregular time series.  TS is a scalar and is set to the
                    computed skew coefficient.

Example:       CO TS=SKEW(TX)
gular time series.  TS is a scalar and is set to the
                    computed skew coefficient.

Example:       CO TS=SKEW(TX)
#TAG SELECT

  Name:    SELECT Extract time series data at unique time specification.
  Use:     COMP   TS=SELECT(TX,LEVEL,RANGE,FLAG,TWINDOW,TFLAG)

  Description:     This function is used to extract data from any regular or
                   irregular time series, based on any number of unique time
                   specifications.  The extraction process can take place on
                   any of five different selection LEVELs which can be mutually
                   inclusive or exclusive as defined by the FLAG and RANGE
                   parameters.  Each LEVEL has a RANGE parameter that is either
                   a specific value or a range of values.  The extracted data
                   is defaulted to be irregular time series, but the user has
                   the option to redefine it as regular by the TFLAG parameter.
                   CAUTION:  Defining the extracted data to be regular will
                   cause it to be stored in a consecutive manner at regular
                   time interval specified on the E pathname part without
                   requard to its actual irregular date and time.


 Parameter:                 Description
 --------------------------------------------------------------------------
 TX          Input variable name of regular or irregular time series.
 LEVEL       Level of time specific selection.
 RANGE       Begining and ending values of LEVEL.  If only one value is
             specified, then the beginning and ending values are assumed to
             be the same.  The following table shows all the valid LEVEL and
             Range values.

 --------------------------------------------------------------------------
 LEVEL                 Range                         | Examples
 ----------------------------------------------------|---------------------
 YEAR    Numeric:  Four digit year value or a range  | 1938 or 1938-1945
         of values.  #### or ####-####               |
 MONTH   Alpha:  First three characters of a month or| JAN or OCT-FEB
         a range of months.  aaa or aaa-aaa          |
 DAYMON  Numeric/Alpha: One or two digit day value or| 15 or 1-15 or
         a range of values or the key word "LASTDAY" | LASTDAY or
         which specifies the last value of the month.| 15-LASTDAY
 DAYWEE  Alpha:  First three characters of a week    | MON or SUN-SAT
         day or a range of week days. aaa or aaa-aaa |
         Note: Sunday is day 1 and Saturday is 7.    |
 TIME    Numeric: Four digit military style 24 hour  | 2300 or 0300-0600
         clock consisting of a single time or a      |
         range of time.  #### or ####-####           |
 MINMAX  Numeric: Floating point number or a minimum | 33.25 or 31.1-32.5
         - maximum pair of numbers used to filter the| 33.25 or 31.1_32.
         data with.  #### or ####-#### or ####_####  | -2.5  or -3_-1
 --------------------------------------------------------------------------
 FLAG    The valid entries for the processing FLAG are "INCLUDE" (default)
         or "EXCLUDE".  This entry controls the inclusion or exclusion
         of all data specified by the LEVEL and RANGE.
 TWINDO  This parameter is only used with the TIME component of the LEVEL
         parameter and is expressed in minutes before and after the time
         of day within which the data will be extracted.  The window is
         assumed to be symmetric about the time specified in RANGE.
         At the time boudaries of 0000 and 2400; the time window will
         not cross into the previous or next day.
 TFLAG   The valid entries for the TFLAG are "IRREGULAR" (default) or
         "REGULAR".  This parameter allows the user to control how DSSMATH
         treats the data extracted as it relates to its internal defenition
         of the type of time series data it is.  This allows the user to
         over ride the protection in the program to write irregular data
         as regular.  Caution: Read previous caution in using this option.

Example:  COMP TS=SELECT(TX,YEAR,1919-1922)
          COMP TS=SELECT(TX,YEAR,1919-1922,EXCLUDE)
          COMP TS=SELECT(TX,TIME,1200,INCLUDE,10,REGULAR)
#TAG MREG

  Name:    MREG  Multiple linear regression funtion used to calculate
                 the regression coefficients.
  Use:     CO PF=MREG(TY,TX1,TX2,...,TXn,min,max)

  Description:       This function is used to determine the coefficients
                     ( Bn ) of a linear regression equation of the general
                     form ( Y = B0 + B1*X1 + B2*X2 + Bn*Xn ).  Where Y is
                     the dependent variable and the X1, X2, and Xn are
                     independent variables.  The MREG function requires that
                     the function paramaters TY, TX1, TX2, and TXn be regular
                     time series variables and that they all have the same
                     time interval.  It is further required that the time
                     variables be retrieved in the same sequential order as
                     specified in the function paramater list. In other words
                     TY is retrieved from DSS first followed by TX1 and so on.
                     The number of independent time series variables
                     that can be specified is limited to one less the maximum
                     number of time series variables that the program allows.
                     On the DOS PC this value will be 4 independent variables.
                     The calculated linear regression coefficients will be
                     stored in a paired function variable specified by the
                     user (PF).  The user should store this variable to DSS
                     with the PUT command if it is to be used later with the
                     AMREG function.
                     Two optional function parameters "min max" are available
                     to specify a range of values that control which values
                     in the dependent variable are to be used for calculating
                     the regression coefficients.  This two parameters must be
                     specified as the last two parameters and if specified,
                     both must be specified as real numbers.

Example:       COMP PF=MREG(TY,TX1,TX2)
               COMP PF1=MREG(TY,TX1,TX2,0.0,20000.0)
#TAG AMREG

  Name:    AMREG  Apply multiple linear regression equation.
  Use:     CO TY=MREG(PF,TX1,TX2,...,TXn,min,max)

  Description:       This function is used to calculate a regular time series
                     (TY) based on a linear regression equation of the general
                     form ( Y = B0 + B1*X1 + B2*X2 + Bn*Xn ).  Where Y is
                     the dependent variable and the X1, X2, and Xn are
                     independent variables.  The AMREG function requires that
                     the function paramaters TY, TX1, TX2, and TXn be regular
                     time series variables and that they all have the same
                     time interval.  It is further required that the time
                     variables be retrieved in the same sequential order as
                     specified in the function paramater list. In other words
                     TX1 is retrieved from DSS first followed by TX2 and so on.
                     The number of independent time series variables
                     that can be specified is limited to one less the maximum
                     number of time series variables that the program allows.
                     On the DOS PC this value will be 4 independent variables.
                     The linear regression coefficients (B0 - Bn) are stored
                     in a paired function variable (PF) which is normally
                     retrieved from DSS.
                     Two optional function parameters "min max" are available
                     to specify a range of values that control which values
                     in the dependent variable are to be accepted as valid
                     computed values.  This two parameters must be
                     specified as the last two parameters and if specified,
                     both must be specified as real numbers.

Example:       COMP TY=AMREG(PF,TX1,TX2)
               COMP TY1=AMREG(PF1,TX1,TX2,0.0,20000.0)
#TAG CONIC
  Name:    CONIC     Conic interpolation from elevation/area table
  Use:     CO TY=CONIC(TX,TB,input,output,[scale])

  Description:       Interpolate values for TX using conic interpolation
                     table TB and  store the result  in TY. TX and TY
                     variables must be regular or irregular time series
                     data. TB is a paired data variable that can be
                     created using program DSSPD. The first paired data
                     values contain the initial conic depth in feet "x(1)" and
                     storage in acre-feet below the first elevation "y(1)".
                     The rest of the paired values "x(2--),y(2--)" contain
                     the elevation in ft-msl and area in acres.  If the
                     initial conic depth is undefined, the function will
                     calculate one.  The third and fourth parameters are used
                     to specify the type of input (TX) and output (TY) data
                     desired.  The input type has to be either STORAGE or
                     ELEVATION.  The output type has to be either STORAGE,
                     ELEVATION, or AREA. An optional fifth parameter can
                     be used to specify a scale value to use with the input
                     and output storage values.  The default scale value
                     is 1.0 acre foot.

 Example:      CO TY=CONIC(TX,TB,ELEV,STOR)
               CO TY=CONIC(TX,TB,STOR,ELEV)
               CO TY=CONIC(TX,TB,ELEV,AREA)
               CO TY=CONIC(TX,TB,STOR,AREA)
               CO TY=CONIC(TX,TB,STOR,AREA,1000)
#TAG END
  THIS IS THE END
D
  THIS IS THE END
