StartLog(LogFile="Results/Test-NewSQLiteDatabase-File.TSTool.log")
# Test to read a table from a SQLite database:
# - use an in-memory database and file database
# - close the databases so that files are not open and locked
RemoveFile(InputFile="results/test-sqlite.db",IfNotFound=Ignore)
NewSQLiteDatabase(DataStore="TestSQLite",DatabaseFile="results/test-sqlite.db")
RunSql(DataStore="TestSQLite",Sql="CREATE TABLE IF NOT EXISTS table1 (id INTEGER PRIMARY KEY NOT NULL, name TEXT NOT NULL, integer1 INTEGER, float1 REAL)")
RunSql(DataStore="TestSQLite",Sql="INSERT INTO table1 (name, integer1, float1) VALUES ('name1', 1, 1.1)")
RunSql(DataStore="TestSQLite",Sql="INSERT INTO table1 (name, integer1, float1) VALUES ('name2', 2, 2.2)")
CloseDataStore(DataStore="TestSQLite",StatusMessage="Closed after test.")
# Read the table:
# - make a copy of the database to prevent conflict
CopyFile(InputFile="results\test-sqlite.db",OutputFile="results\test-sqlite2.db")
OpenDataStore(DataStoreName="TestSQLite2",DataStoreDescription="SQLite Test Database",DataStoreType="GenericDatabaseDataStore",DatabaseEngine="SQLite",ServerName="results/test-sqlite2.db")
ReadTableFromDataStore(DataStore="TestSQLite2",DataStoreTable="table1",TableID="TestTable")
CloseDataStore(DataStore="TestSQLite2")
# Compare the tables after writing to files.
# Uncomment the next line to regenerate expected results.
# WriteTableToDelimitedFile(TableID="TestTable",OutputFile="expected-results/test-NewSQLiteDatabase-File-out.csv",IncludeColumns="name,integer1,float1")
WriteTableToDelimitedFile(TableID="TestTable",OutputFile="results/test-NewSQLiteDatabase-File-out.csv",IncludeColumns="name,integer1,float1")
CompareFiles(InputFile1="expected-results/test-NewSQLiteDatabase-File-out.csv",InputFile2="results/test-NewSQLiteDatabase-File-out.csv",IfDifferent=Warn)
