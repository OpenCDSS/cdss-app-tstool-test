############################################################
#
# Write results to CSV file
#
############################################################

# import build-in modules
import csv
import datetime
import getpass
import socket
import os
import sys

def Write_CSV (fileName,
                TSID,
                TSID_Indep,
                n1,
                MeanX1,
                SX1,
                n2,
                MeanX2,
                SX2,
                MeanY1,
                SY1,
                NY,
                MeanY,
                SY,
                SkewY,
                a,
                b,
                R,
                R2,
                MeanY1est,
                SY1est,
                RMSE,
                SEE,
                SEP,
                SESlope,
                TestScore,
                TestQuantile,
                TestRelated,
                NYfilled,
                MeanYfilled,
                SYfilled,
                SkewYfilled):

    # Open the output file, give feedback on error. Most likely cause is output file open in Excel
    try:
        fileOpen = open(fileName, 'wb')
        # Headers have comma's, delimiter set to '@' for header printing only
        output = csv.writer(fileOpen, delimiter='@')
    except:
        print('Could not open statistics output file - %s' % fileName)
        sys.exit(9)

    # Write headerlines to the output file
    output.writerow(['# File generated by...'])
    output.writerow(['# program:      Python 2.5'])

    user = getpass.getuser()
    output.writerow(['# user:         ' + user])

    # Tue Dec 06 09:39:58 MST 2011
    currentDate=datetime.datetime.strftime(datetime.datetime.now(), '%a %b %d %H:%M:%S %Z %Y')
    output.writerow(['# date:         ' + currentDate])

    host = socket.gethostname()
    output.writerow(['# host:         ' + host])

    directory = os.getcwd()
    output.writerow(['# directory:    ' + directory])

    allArguments = ''
    for arg in sys.argv:
        allArguments = allArguments + arg + ' '
    output.writerow(['# command line: python ' + allArguments])

# command line: TSTool
#            K:\PROJECTS\1025_CWCB-SPDSS Relational Systems Integration Phase 5\Tasks\140_TSTool\MSM\FillRegression\Test_FillRegression_Streamflow_Month_OneEquation.TSTool

    output.writerow(['# -----------------------------------------------------------------------'])
    output.writerow(['# '])
    output.writerow(['# The following statistics are computed to determine and evaluate the the regression relationships.'])
    output.writerow(['# The regression type performed was:  OLSRegression'])
    output.writerow(['# X indicates the independent time series and Y indicates the dependent time series.'])
    output.writerow(['# Some statistics are ignored for some regression approaches, but are provided for comparison.'])
    output.writerow(['# '])
    output.writerow(['# N1 - Count of non-missing data points overlapping in the dependent and independent time series'])
    output.writerow(['# MeanX1 - Mean of the independent N1 values'])
    output.writerow(['# SX1 - Standard deviation of the independent N1 values'])
    output.writerow(['# N2 - Count of the non-missing data points in the independent time series outside of N1'])
    output.writerow(['# MeanX2 - Mean of the independent N2 values'])
    output.writerow(['# SX2 - Standard deviation of the independent N2 values'])
    output.writerow(['# MeanY1 - Mean of the dependent N1 values'])
    output.writerow(['# SY1 - Standard deviation of the dependent N1 values'])
    output.writerow(['# NY - Count of the non-missing dependent values'])
    output.writerow(['# MeanY - Mean of the NY values'])
    output.writerow(['# SY - Standard deviation of the NY values'])
    output.writerow(['# SkewY - skew of the NY values'])
    output.writerow(['# a - The intercept for the relationship equation'])
    output.writerow(['# b - The slope of the relationship equation'])
    output.writerow(['# R - The correlation coefficient for N1 values'])
    output.writerow(['# R2 - R-squared, coefficient of determination for N1 values'])
    output.writerow(['# MeanY1est - Mean of N1 values computed from the relationship (estimate dependent values where previously known)'])
    output.writerow(['# SY1est - Standard deviation of N1 values computed from the relationship (estimate dependent values where previously known'])
    output.writerow(['# RMSE - Root mean squared error for N1 values, computed from regression relationship estimated values'])
    output.writerow(['# SEE - Standard error of estimate for N1 values, computed from regression relationship estimated values'])
    #output.writerow(['# SEP - Standard error of prediction for N1 values, computed from regression relationship estimated values'])
    output.writerow(['# SESlope - Standard error (SE) of the slope (b) for N1 values, computed from regression relationship estimated values'])
    output.writerow(['# TestScore - b/SE'])
    output.writerow(['# TestQuantile - From the Student\'s T-test, function of confidence interval and degrees of freedom, DF (N1 - 2)'])
    output.writerow(['# TestOK - Yes if TestScore >= TestQuantile, No if otherwise.'])
    output.writerow(['# SampleSizeOK - Yes if sample size >= MinimumSampleSize, No if otherwise.'])
    output.writerow(['# ROK - Yes if R >= MinimumR, No if otherwise.'])
    output.writerow(['# NYfilled - number of filled dependent values'])
    output.writerow(['# MeanYfilled - Mean of filled dependent values'])
    output.writerow(['# SYfilled - Standard deviation of filled dependent values'])
    output.writerow(['# SkewYfilled - Skew of filled dependent values'])
    output.writerow(['# '])
    output.writerow(['# Column headings are first line below, followed by data lines.'])

    # Close and re-open file to change delimiter to ','
    fileOpen.close()
    fileOpen = open(fileName, 'ab')
    output = csv.writer(fileOpen, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)

    nEquations = len(n1)
    headerRow = ["TSID", "TSID_Independent"]

    for i in range (0,nEquations):
        # For monthly values each column header has the month indication, leave blank for year.
        if nEquations == 1:
            monthNumber = ''
        else:
            monthNumber = '_' + str(i+1)

        # Construct the Header Row
        headerRow = headerRow + ["N1" + monthNumber,
                    "MeanX1" + monthNumber,
                    "SX1" + monthNumber,
                    "N2" + monthNumber,
                    "MeanX2" + monthNumber,
                    "SX2" + monthNumber,
                    "MeanY1" + monthNumber,
                    "SY1" + monthNumber,
                    "NY" + monthNumber,
                    "MeanY" + monthNumber,
                    "SY" + monthNumber,
                    "SkewY" + monthNumber,
                    "a" + monthNumber,
                    "b" + monthNumber,
                    "R" + monthNumber,
                    "R2" + monthNumber,
                    "MeanY1est" + monthNumber,
                    "SY1est" + monthNumber,
                    "RMSE" + monthNumber,
                    "SEE" + monthNumber,
                    #"SEP" + monthNumber,
                    "SESlope" + monthNumber,
                    "TestScore" + monthNumber,
                    "TestQuantile" + monthNumber,
                    "TestOK" + monthNumber,
                    "NYfilled" + monthNumber,
                    "MeanYfilled" + monthNumber,
                    "SYfilled" + monthNumber,
                    "SkewYfilled" + monthNumber]

    # Write the entire header row at once
    output.writerow(headerRow)

    # Close and re-open file to change the quote behavior
    fileOpen.close()
    fileOpen = open(fileName, 'ab')
    # The following does not quote the ID columns, causing TSTool to interpret long integer IDs as doubles
    # (too big to parse an integer)
    output = csv.writer(fileOpen, delimiter=',', quoting=csv.QUOTE_MINIMAL)
    # The following quotes everything
    #output = csv.writer(fileOpen, delimiter=',', quoting=csv.QUOTE_NONNUMERIC)

    # Construct the Data Row
    precision = '%0.5f'
    # Force the double quotes so that TSTool will interpret the column as
    # strings and not format as a double (bug parsing very long integers in TSTool table)
    dataRow =  [ TSID[0], TSID_Indep[0] ]
    for i in range (0,nEquations):
        dataRow = dataRow + [n1[i],
                            precision % MeanX1[i],
                            precision % SX1[i],
                            n2[i],
                            MeanX2[i],
                            SX2[i],
                            precision % MeanY1[i],
                            precision % SY1[i],
                            NY[i],
                            precision % MeanY[i],
                            precision % SY[i],
                            precision % SkewY[i],
                            precision % a[i],
                            precision % b[i],
                            precision % R[i],
                            precision % R2[i],
                            precision % MeanY1est[i],
                            precision % SY1est[i],
                            precision % RMSE[i],
                            precision % SEE[i],
                            #precision % SEP[i][0],
                            precision % SESlope[i],
                            precision % TestScore[i],
                            precision % TestQuantile[i],
                            TestRelated[i],
                            len(NYfilled[i]),
                            precision % MeanYfilled[i],
                            precision % SYfilled[i],
                            precision % SkewYfilled[i]]

    # Write the entire data row at once
    output.writerow(dataRow)

    writeSEP()
    fileOpen.close()

def writeSEP():
    # TODO SAM 2012-05-31 This code was cut from above.
    # The statistics table is not really the place for SEP since SEP is for each estimated value
    return

    # Write all the SEP values for each month
    maxSEPLength = 0
    for i in range (0,len(SEP)):
        maxSEPLength = max(maxSEPLength, len(SEP[i]))

    # The first value is already in the table
    for j in range (1,maxSEPLength):
        dataRow=[]
        for i in range (0,nEquations):
            try:
                # This will fail if for a particular month less than maxSEPLength SEP values are calculated and and empty line will be added
                temp = SEP[i][j]
                dataRow = dataRow + [None, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', precision % temp, '', '', '', '', '', '']
            except:
                dataRow = dataRow + [None, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']
        output.writerow(dataRow)
